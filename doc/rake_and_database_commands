https://github.com/bbatsov/rails-style-guide
https://github.com/bbatsov/ruby-style-guide

Use this README file to introduce your application and point to useful places in the API for learning more.
Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.

$ bundle exec rake db:migrate
$ bundle exec rake db:test:prepare


Reset the database and re-populate the sample data:

$ bundle exec rake db:reset
# db:populate #it is for using /lib/tasks/sample_data.rake
$ bundle exec rake db:populate
$ bundle exec rake db:test:prepare


#to annotate models
bundle exec annotate


About db/seed.db
If you need to add more default categories later, you can append them to the seed file and reload it.
If you want to rerun the seed data, the trick is that the seeds file doesnâ€™t know whether the records
already in the database have to be cleaned up; running rake db:seed again adds all records one more
time, and you end up with duplicate user and categories. You should instead call rake db:setup, which
re-creates the database and adds the seed data as you may expect.





From: http://stackoverflow.com/questions/10301794/difference-between-rake-dbmigrate-dbreset-and-dbschemaload

db:create creates the database for the current env
db:create:all creates the databases for all envs
db:drop drops the database for the current env
db:drop:all drops the databases for all envs
db:migrate runs migrations for the current env that have not run yet
db:migrate:up runs one specific migration
db:migrate:down rolls back one specific migration
db:migrate:status shows current migration status
db:migrate:rollback rolls back the last migration
db:forward advances the current schema version to the next one
db:seed (only) runs the db/seed.rb file
db:schema:load loads the schema into the current env's database
db:schema:dump dumps the current env's schema (and seems to create the db as well)
db:setup runs db:schema:load, db:seed
db:reset runs db:drop db:setup
db:migrate:redo runs (db:migrate:down db:migrate:up) or (db:migrate:rollback db:migrate:migrate) depending on the specified migration
db:migrate:reset runs db:drop db:create db:migrate

Adding admin: in rails c -
User.last.toggle!(:admin) 

#creating a migration to remove field
rails generate migration RemoveEditorFromUser editor:boolean
